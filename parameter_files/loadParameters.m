function ParamsSelectedMoviesCellArray = loadParameters( csvFileName,varargin )
% loadParameters: Load parameters for point tracking
% Params = loadParameters(csvFileName) 
warning OFF BACKTRACE

DefaultParams    = defaultTrackingParameters();
ParamsAllMovies  = loadParametersFromCsv(csvFileName);

%% Figure out which movie(s) to look at

if numel(varargin) > 0
    queryKeyArray = varargin{1};
    %Reference based on numerical index
    if isnumeric(queryKeyArray)
        queryWithinBounds = all(queryKeyArray > 0 & ...
                           queryKeyArray <= numel(ParamsAllMovies));
        if queryWithinBounds
            movieId = queryKeyArray;
        elseif any(queryKeyArray <= 0)
            error('numeric movie ID must be nonnegative index');
        elseif any(queryKeyArray > numel(ParamsAllMovies))
            error('movie ID exceeds range of database');
        end
        
    %Reference based on string key
    elseif iscellstr(queryKeyArray)
        % Check for a movieName field to match to key
        if isfield(ParamsAllMovies,'movieName')
            assert(ischar(ParamsAllMovies(1).movieName),...
                   '"movieName" field must contain a string');
        else
            error('Missing field "movieName" to match as key');
        end
        
        allKeys = {ParamsAllMovies.movieName};
        
        % Check that all queried keys are found
        queryKeyIsFound = ismember(queryKeyArray, allKeys);
        % Check which keys in the database were queried
        keyIsQueried    = ismember(allKeys, queryKeyArray);
        
            
        if all(queryKeyIsFound)
            movieId     = find(keyIsQueried);
            
        else
            missingKeys = queryKeyArray(~queryKeyIsFound);
            error('Missing key: %s\n',missingKeys{:})

        end
        
    else
        error('Identifying key must be numeric or string');
    end
else % (default) use the last set of parameters
    movieId = numel(ParamsAllMovies);
end

ParamsSelectedMovies = ParamsAllMovies(movieId);
ParamsSelectedMoviesCellArray = cell(size(ParamsSelectedMovies));

%% Error checking
for k = 1:numel(ParamsSelectedMovies)
    
Params = ParamsSelectedMovies(k);
% inputPathName
checkRequiredField(Params,                                  ...
                   'inputPathName',                         ...
                   @(x) logical(exist(x,'dir')));

% outputPathName - create if it's in same folder as input path
try
    checkRequiredField(Params,                              ...
                       'outputPathName',                    ...
                       @(x) logical(exist(x,'dir')),        ...
                       'directory does not exist');
catch errorMsg
    if strfind(errorMsg.message,'Error: invalid')
        inputParentDirectory      = fileparts(Params.inputPathName );
        [outputParentDirectory,...
         outputDirectoryName,~]   = fileparts(Params.outputPathName);
        
        if strcmp(inputParentDirectory,outputParentDirectory)
            mkdir(outputParentDirectory,outputDirectoryName)
        else
            rethrow(errorMsg);
        end
    else
        rethrow(errorMsg);
    end
end

% inputFileName
checkRequiredField(Params,'inputFileName',                  ...
                  @(x) logical(exist(fullfile(              ...
                             Params.inputPathName,          ...
                             x))));

% preprocessImageFunctionName
Params = checkFunctionField(Params,                         ...
                            'preprocessImageFunctionName',  ...
                            DefaultParams);

% detectPointsFunctionName
Params = checkFunctionField(Params,                         ...
                            'detectPointsFunctionName',     ...
                            DefaultParams); 

% trackingMaxBidirectionalError
Params = checkOptionalField(Params,                         ...
                            'trackingMaxBidirectionalError',...
                            (@(x) numel(x) == 1 &           ...
                                  isnumeric(x)  &           ...
                                  x > 0),                   ...
                            DefaultParams);
                        
% trackingBlockSizeVal
Params = checkOptionalField(Params,                         ...
                            'trackingBlockSizeVal',         ...
                            (@(x) numel(x) == 1 &           ...
                                  isinteger(x)  &           ...
                                  mod(x,2) == 1)  ,         ...
                            DefaultParams,                  ...
                            'must be odd integer');
                        
BlockSize = Params.trackingBlockSizeVal;
Params.trackingBlockSize = [BlockSize, BlockSize];
                   
% nRoisRows nRoisColumns
Params = checkOptionalField(Params,                         ...
                            'nRoisRows',                    ...
                            (@(x) numel(x) == 1 &           ...
                                  isinteger(x)  &           ...
                                  x > 0),                   ...
                            DefaultParams,                  ...
                            'must be integer');
                        
Params = checkOptionalField(Params,                         ...
                            'nRoisColumns',                 ...
                            (@(x) numel(x) == 1 &           ...
                                  isinteger(x)  &           ...
                                  x > 0),                   ...
                            DefaultParams,                  ...
                            'must be integer');
                        
Params.nRois = [Params.nRoisRows, Params.nRoisColumns];
                     
% pointDensityThreshold
Params = checkOptionalField(Params,                         ...
                            'pointDensityThreshold',        ...
                            (@(x) numel(x) == 1 &           ...
                                  isnumeric(x)  &           ...
                                  x > 0),            ...
                            DefaultParams);
                 
% pointUpdateDelay
Params = checkOptionalField(Params,                         ...
                            'pointUpdateDelay',             ...
                            (@(x) numel(x) == 1 &           ...
                                  isinteger(x)  &           ...
                                  x > 0),                   ...
                            DefaultParams,                  ...
                            'must be integer');
                        
% pointUpdateInterval
Params = checkOptionalField(Params,                         ...
                            'pointUpdateInterval',          ...
                            (@(x) numel(x) == 1 &           ...
                                  isinteger(x)  &           ...
                                  x > 0),                   ...
                            DefaultParams,                  ...
                            'must be integer');
                        
% trackMargin
Params = checkOptionalField(Params,                         ...
                            'trackMargin',                  ...
                            (@(x) numel(x) == 1 &           ...
                                  ((x == 0 ) | (x == 1))),  ...
                            DefaultParams,                  ...
                            'must be 0 or 1 (off or on)');

% Optional Parameters - only relevant if tracking margin
if Params.trackMargin
    % 
    checkRequiredField(Params,                              ...
                       'initialMarginMaskFileName',         ...
                       @(x) logical(exist(fullfile(         ...
                                  Params.inputPathName,x))));
    %Load Margin Mask
    Params...
    .initialMarginMask = imread(                            ...
                         fullfile(Params.inputPathName,     ...
                                  Params.initialMarginMaskFileName));
                     
    Params = checkOptionalField(Params,                     ...
                                'alphaRadius',              ...
                                (@(x) numel(x) == 1 &       ...
                                      isnumeric(x)  &       ...
                                      x > 0),          ...
                                DefaultParams);
end
    

ParamsSelectedMoviesCellArray{k} = Params;
end

end
function checkRequiredField(Params,                         ...
                            fieldToCheck,                   ...
                            testFunction,                   ...
                            varargin)
    if numel(varargin)>0
        optionalErrorString = varargin{1};
    else
        optionalErrorString = '';
    end
    if isfield(Params,fieldToCheck)
        assert(testFunction(Params.(fieldToCheck)),         ...
               'Error: invalid %s "%s" %s',                 ...
               fieldToCheck,                                ...
               Params.(fieldToCheck),                       ...
               optionalErrorString);
    else
        error('Missing field: file has no field "%s"',fieldToCheck);
    end

end

function Params = checkOptionalField(Params,               ...
                                     fieldToCheck,         ...
                                     testFunction,         ...
                                     DefaultParams,        ...
                                     varargin)
    if numel(varargin)>0
        optionalErrorString = varargin{1};
    else
        optionalErrorString = '';
    end
    
    if isfield(Params,fieldToCheck)
        if testFunction(Params.(fieldToCheck))
            
        elseif (abs(Params.(fieldToCheck))<eps ||                ...
                isnan(Params.(fieldToCheck)))
            warning('Missing Field %s, using default value "%s"',...
                    fieldToCheck,...
                    rptgen.toString(DefaultParams.(fieldToCheck)));
            Params.(fieldToCheck) = DefaultParams.(fieldToCheck);

        elseif ischar(Params.(fieldToCheck))
            error('Error: invalid %s "%s" %s',...
                  fieldToCheck,               ...
                  Params.(fieldToCheck),      ...
                  optionalErrorString);
              
        else
            error('Error: invalid %s %s',...
                  fieldToCheck,...
                  optionalErrorString);
        end
               
    else
        warning('Missing field %s; using default value "%s"',...
                fieldToCheck,...
                rptgen.ToString(DefaultParams.(fieldToCheck)));
        Params.(fieldToCheck) = DefaultParams.(fieldToCheck);
    end
end

function Params = checkFunctionField(Params,               ...
                                     fieldToCheck,         ...
                                     DefaultParams)
                                 
    idx           = strfind(fieldToCheck,'FunctionName');
    functionField = fieldToCheck(1:idx-1);
    
    if isfield(Params,fieldToCheck)
        if exist(Params.(fieldToCheck))
        
            Params.(functionField) =  str2func(Params.(fieldToCheck));
        else
            warning(['Specified %s function "%s" is not in path; ',...
                     'using default (%s)'],                    ...
                     functionField,...
                     Params.(fieldToCheck),           ...
                     func2str(DefaultParams.(functionField)));
        end
    else 
        warning('No %s function specified; using default (%s)',...
                functionField,                                 ...
                func2str(DefaultParams.(functionField)));
        Params.(functionField) = DefaultParams        ...
                                           .(functionField);
    end
end

